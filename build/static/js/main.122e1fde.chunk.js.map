{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","orignal_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.122e1fde.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect} from 'react'\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\"\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n\r\n\r\n    const [movies, setMovies] =useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n\r\n    // A snippet of code which runs on a specific condition\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    // Options for react-youtube\r\n    const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n      if(trailerUrl) {\r\n          setTrailerUrl(\"\");\r\n      } else {\r\n          movieTrailer(movie?.name || \"\" )\r\n          .then((url) => {\r\n            const urlParams = new URLSearchParams(new URL(url).search);\r\n            setTrailerUrl(urlParams.get('v'));\r\n          }).catch((error) => console.log(error));\r\n      }\r\n\r\n  }\r\n \r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map(movie => (\r\n                    <img \r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                        alt={movie.name}  \r\n\r\n                        />\r\n                ))}\r\n            </div>\r\n            { trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"76cc77f6774982fffb6c20f52eb8941a\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react'\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\"\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[]);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n      }\r\n\r\n    return (\r\n        <header className= \"banner\"\r\n          style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\r\n            backgroundPosition: \"center center\",\r\n          }}\r\n        >\r\n        <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\"> {movie?.title || movie?.name || movie?.orignal_name} </h1>\r\n\r\n        <div className=\"banner__buttons\">\r\n            <button className=\"banner__button\">Play</button>\r\n            <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        \r\n        <h1 className=\"banner__description\">\r\n            {truncate(movie?.overview,150)}\r\n        </h1>\r\n\r\n        </div>\r\n\r\n        <div className=\"banner--fadeBottom\"></div>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./Nav.css\"\r\n\r\n\r\nfunction Nav() {\r\n\r\n    const[show,handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 100) {\r\n              handleShow(true);\r\n            } else {\r\n              handleShow(false);\r\n            }\r\n          });\r\n          return () => {\r\n            window.removeEventListener(\"scroll\");\r\n          };\r\n\r\n    },[]);\r\n\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"} `}>\r\n            <img\r\n                className=\"nav__logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\r\n                alt=\"Netflix Logo\"\r\n            />\r\n            <img\r\n                className=\"nav__avatar\"\r\n                src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n                alt=\"Avatar\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from \"react\";\nimport './App.css';\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner/>    \n      <Row \n      title =\"NETFLIX ORIGINALS\" \n      fetchUrl={requests.fetchNetflixOriginals}\n      isLargeRow\n      />\n      <Row title= \"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title= \"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title= \"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title= \"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title= \"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title= \"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title= \"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}